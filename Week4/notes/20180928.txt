Date: 09/28/2018
================

- Djikstra's Assignment
    - Look through the vertices find the one with label 0
    find its vertex id (that is what we use internally). (done)
    - Keep track of a visited set(vertex ids); the ones we found the least cost already. (done)
    - Keep track of unvisited (Ordered Tree Set), will have pairs (vertexid and cost; define a less than method).
        - Define class, vertex cost. (done)
    - Keep track of previous (done)
        - List
            - indices are vertexids
            - values = previous vertexid.


    - vertices
        - dictionary (done)
            - vertexid, to object itself(cost).

            - initialize cost to 0 to 0. (done)
            - cost to every other thing is inifinity. (sys.maxint)  (done)      
    - Compute the least cost for getting to any vertex in the map.
    - get smallest (done)
        - get smallest cost, and pops from the tree.
        - check if its visited.
            - if not add it(vertex id).
    
    - updating the cost to any vertex.
        - add cost of current + cost to get to vertex.
            - check if its less than the current cost to get to that vertex.
            - add to univisited set.

    - terminate when the tree is empty.
        - if visited set had all vertices (n-1 edges)